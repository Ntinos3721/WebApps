using Autofac;
using Autofac.Integration.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Web.Mvc;

namespace FooCommerce.Web.Framework.Infrastracture
{
    public class FooEngine : IEngine
    {
        private ContainerManager _containerManager;

        void RegisterDependencies()
        {
            // Used to build an Autofac.IContainer from component registrations.
            var builder = new ContainerBuilder();
            var container = builder.Build();
            // Create a manager ...
            _containerManager = new ContainerManager(container);

            // register INSTANCES as components (IEngine is the service that the component will provide)
            builder = new ContainerBuilder();
            builder.RegisterInstance(this).As<IEngine>().SingleInstance();
            builder.Update(container);

            RegisterServiceDependencies(builder);

            //set dependency resolver
            DependencyResolver.SetResolver(new AutofacDependencyResolver(container));
        }

        void RegisterServiceDependencies(ContainerBuilder builder)
        {
            // register components to be created through reflection
            builder.RegisterType<FooCommerce.Services.ProductService>().As<FooCommerce.Services.IProductService>().InstancePerLifetimeScope();
        }

        public ContainerManager ContainerManager
        {
            get { return _containerManager; }
        }

        #region IEngine Members

        public void Initialize()
        {
            RegisterDependencies();
        }

        

        #endregion
    }
}
